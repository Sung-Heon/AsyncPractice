plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'scala'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'application'
}

ext {
    scalaVersion = '2.12.19'  // Latest stable 2.12.x version
    scalaMajorVersion = '2.12'
}

ext {
    kotlinVersion = '1.9.22'
}

version = '0.0.1-SNAPSHOT'

def fileEncoding = 'UTF-8'

// Set Java compatibility
ext {
    javaVersion = JavaVersion.VERSION_11
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    
    // Ensure consistent Java version for all tasks
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Configure all Java compilation tasks
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

// Configure Java toolchain for all tasks
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    
    // Set source and target compatibility
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Ensure all tasks use the Java 11 toolchain
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

tasks.withType(JavaExec).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
    // Ensure no conflicting executable property
    executable = null
}

// Ensure all tasks use the same Java version
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

// Configure test tasks
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty 'file.encoding', 'UTF-8'
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
}

// Configure application plugin
application {
    mainClass = 'challenge1.java8.CompletableFutureExample'
    applicationDefaultJvmArgs = ['-Dfile.encoding=UTF-8']
}

// Set Java compilation tasks to use Java 11
sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

// Exclude Akka actor source files from compilation
sourceSets {
    main {
        java {
            exclude '**/challenge4/akka_actor/**'
        }
    }
}

// Set Kotlin JVM target to match Java version
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '11'
        apiVersion = '1.4'
        languageVersion = '1.4'
    }
}

// Configure Scala compilation
tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        '-target:jvm-11',
        '-feature',
        '-deprecation',
        '-unchecked',
        '-language:implicitConversions',
        '-language:postfixOps'
    ]
}

repositories {
    mavenCentral()
    // Add Sonatype repository for Scala libraries
    maven { url 'https://oss.sonatype.org/content/repositories/releases/' }
    // Keep jcenter as fallback for any remaining dependencies
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
    implementation "com.google.guava:guava:33.0.0-jre"
    implementation "io.reactivex:rxjava:1.3.8"
    implementation "io.reactivex:rxjava-math:1.0.0"
    // Using Akka 2.6.20 with Scala 2.12 for better compatibility
    implementation "com.typesafe.akka:akka-stream_${scalaMajorVersion}:2.6.20"
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    
    // Scala standard library
    implementation "org.scala-lang:scala-library:${scalaVersion}"
    // Camel dependencies
    implementation platform('org.apache.camel.springboot:camel-spring-boot-dependencies:3.22.0')
    implementation 'org.apache.camel.springboot:camel-spring-boot-starter'
    implementation 'org.apache.camel:camel-quartz:3.22.0'
    implementation 'org.apache.camel:camel-spring:3.22.0'
    implementation 'org.apache.camel:camel-core:3.22.0'  // Explicitly add core dependency
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'ch.qos.logback:logback-classic:1.5.3'
    // Using a more recent version of ScalaMeter that's available
    implementation 'com.storm-enroute:scalameter-core_2.12:0.17'
    implementation 'com.storm-enroute:scalameter_2.12:0.17'

    testImplementation 'junit:junit:4.13.2'
    // Using Awaitility 3.1.6 which is available in Maven Central
    testImplementation 'org.awaitility:awaitility:3.1.6'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

test {
    useJUnitPlatform()
    systemProperty 'file.encoding', fileEncoding
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
    exclude '**/challenge4/akka_actor/**'  // Temporarily exclude Akka tests
}

tasks.withType(JavaCompile) {
    options.encoding = fileEncoding
}

// http://forums.gradle.org/gradle/topics/set_maxparallelforks_to_number_of_cores_on_the_current_machine
tasks.withType(Test) {
    maxParallelForks = Runtime.getRuntime().availableProcessors()
    maxHeapSize = '1G'
    jvmArgs '-XX:MaxMetaspaceSize=1G'
}
